name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker Image
      run: |
        REPO_NAME=${{ github.repository }}
        IMAGE_NAME="${REPO_NAME//\//_}" # Replace '/' with '_' for valid image name
        IMAGE_NAME="${IMAGE_NAME,,}" # Convert to lowercase
        docker build -t $IMAGE_NAME:latest .

    - name: Stop and Remove Existing Containers
      run: |
        REPO_NAME=${{ github.repository }}
        IMAGE_NAME="${REPO_NAME//\//_}" # Replace '/' with '_' for valid image name
        IMAGE_NAME="${IMAGE_NAME,,}" # Convert to lowercase
        # Check if the container exists before stopping and removing
        CONTAINER_ID=$(docker ps -aq -f name=${IMAGE_NAME})
        if [ -n "$CONTAINER_ID" ]; then
          echo "Stopping and removing container ${IMAGE_NAME}"
          docker stop ${IMAGE_NAME}
          docker rm ${IMAGE_NAME}
        else
          echo "No existing container to stop or remove."
        fi


    - name: Run Docker Container
      run: |
        REPO_NAME=${{ github.repository }}
        IMAGE_NAME="${REPO_NAME//\//_}" # Replace '/' with '_' for valid image name
        IMAGE_NAME="${IMAGE_NAME,,}" # Convert to lowercase
        # Create and start the new container on port 3333
        docker run -d --name "${IMAGE_NAME}_new" -p 3333:3333 $IMAGE_NAME:latest

    - name: Health Check
      run: |
        sleep 10 # Give the container some time to start
        if ! curl --fail http://localhost:3333/api/health; then
          echo "Health check failed"
          exit 1
        fi

    - name: Switch to New Container
      run: |
        REPO_NAME=${{ github.repository }}
        IMAGE_NAME="${REPO_NAME//\//_}" # Replace '/' with '_' for valid image name
        IMAGE_NAME="${IMAGE_NAME,,}" # Convert to lowercase
        # Stop and remove the old container if it exists
        if [ "$(docker ps -aq -f name=${IMAGE_NAME})" ]; then
          docker stop ${IMAGE_NAME}
          docker rm ${IMAGE_NAME}
        fi
        
        # Rename the new container to the original name
        docker rename "${IMAGE_NAME}_new" $IMAGE_NAME
